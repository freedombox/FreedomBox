#!/usr/bin/python3
# -*- mode: python -*-
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Configuration helper for Syncthing.
"""

import argparse
import grp
import os
import pwd
import shutil
import subprocess
import xml.etree.ElementTree as etree

from plinth import action_utils

data_dir = '/var/lib/syncthing'
service_name = 'syncthing@syncthing'


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    subparsers.add_parser(
        'setup', help='Perform post-installation actions for Syncthing')
    subparsers.add_parser('enable', help='Enable Syncthing')
    subparsers.add_parser('disable', help='Disable Syncthing')

    subparsers.required = True
    return parser.parse_args()


def subcommand_setup(_):
    """Actions to be performed before enabling Syncthing"""
    _create_syncthing_group()
    _create_syncthing_user()
    _create_data_dir()
    _disable_global_discovery()


def _create_syncthing_group():
    """Create syncthing group if not exists."""
    try:
        grp.getgrnam('syncthing')
    except KeyError:
        subprocess.run(['addgroup', '--system', 'syncthing'], check=True)


def _create_syncthing_user():
    """Create syncthing user if not exists."""
    try:
        pwd.getpwnam('syncthing')
    except KeyError:
        subprocess.run(
            [
                'adduser', '--system', '--ingroup', 'syncthing', '--home',
                '/var/lib/syncthing', '--gecos',
                'Syncthing file synchronization server', 'syncthing'
            ],
            check=True)


def _create_data_dir():
    """Create data directory if not exists."""
    if not os.path.exists(data_dir):
        os.makedirs(data_dir, mode=0o750)
        shutil.chown(data_dir, user='syncthing', group='syncthing')


def _disable_global_discovery():
    """Disable Global Discovery."""
    config_file_relative_path = '.config/syncthing/config.xml'
    config_file_path = os.path.join(data_dir, config_file_relative_path)
    tree = etree.parse(config_file_path)
    tree.getroot().find('options').find('globalAnnounceEnabled').text = 'false'
    tree.write(config_file_path)
    action_utils.service_restart(service_name)


def subcommand_enable(_):
    """Enable web configuration and reload."""
    action_utils.service_enable(service_name)
    action_utils.webserver_enable('syncthing-plinth')


def subcommand_disable(_):
    """Disable web configuration and reload."""
    action_utils.webserver_disable('syncthing-plinth')
    action_utils.service_disable(service_name)


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
