#!/usr/bin/python3
# -*- mode: python -*-
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Configuration helper for the ejabberd service
"""

import argparse
import subprocess


def parse_arguments():
    """Return parsed command line arguments as dictionary"""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    # Register a new user account
    register = subparsers.add_parser('register',
                                     help='Register a new user account')
    register.add_argument('--username',
                          help='Username for the new user account')
    register.add_argument('--password',
                          help='Password for the new user account')

    return parser.parse_args()


def subcommand_register(arguments):
    """Register a new user account"""
    username = arguments.username
    password = arguments.password
    hostname = subprocess.check_output(['hostname'])

    try:
        output = subprocess.check_output(['ejabberdctl', 'register',
                                          username, hostname, password])
        print(output.decode())
    except subprocess.CalledProcessError as e:
        print('Failed to register XMPP account:', e.output.decode())


def main():
    """Parse arguments and perform all duties"""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
