#!/usr/bin/python3
# -*- mode: python -*-
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Configuration helper for BIND server.
"""

import argparse

from plinth import action_utils
from plinth.modules.bind import CONFIG_FILE, DEFAULT_CONFIG
from plinth.modules.bind import set_forwarders, set_dnssec


def parse_arguments():
    """Return parsed command line arguments as dictionary"""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')
    subparsers.add_parser('setup', help='Setup for BIND')

    configure = subparsers.add_parser('configure', help='Configure BIND')
    configure.add_argument('--forwarders',
                           help='List of IP addresses, separated by space')
    configure.add_argument('--dnssec', choices=['enable', 'disable'],
                           help='Enable or disable DNSSEC')

    subparsers.required = True
    return parser.parse_args()


def subcommand_setup(_):
    """Setup BIND configuration."""
    conf_file = open(CONFIG_FILE, "w")
    conf_file.write(DEFAULT_CONFIG)
    conf_file.close()
    action_utils.service_restart('bind9')


def subcommand_configure(arguments):
    """Configure BIND."""
    set_forwarders(arguments.forwarders)
    set_dnssec(arguments.dnssec)
    action_utils.service_restart('bind9')


def main():
    """Parse arguments and perform all duties"""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
