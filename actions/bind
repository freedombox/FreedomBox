#!/usr/bin/python3
# SPDX-License-Identifier: AGPL-3.0-or-later
"""
Configuration helper for BIND server.
"""

import argparse
from pathlib import Path

from plinth import action_utils
from plinth.modules.bind import (CONFIG_FILE, DEFAULT_CONFIG, ZONES_DIR,
                                 set_dnssec, set_forwarders)


def parse_arguments():
    """Return parsed command line arguments as dictionary"""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')
    setup = subparsers.add_parser('setup', help='Setup for BIND')
    setup.add_argument(
        '--old-version', type=int, required=True,
        help='Earlier version of the app that is already setup.')

    configure = subparsers.add_parser('configure', help='Configure BIND')
    configure.add_argument('--forwarders',
                           help='List of IP addresses, separated by space')
    configure.add_argument('--dnssec', choices=['enable', 'disable'],
                           help='Enable or disable DNSSEC')

    subparsers.required = True
    return parser.parse_args()


def subcommand_setup(arguments):
    """Setup BIND configuration."""
    if arguments.old_version == 0:
        with open(CONFIG_FILE, "w") as conf_file:
            conf_file.write(DEFAULT_CONFIG)

    Path(ZONES_DIR).mkdir(exist_ok=True, parents=True)

    action_utils.service_restart('bind9')


def subcommand_configure(arguments):
    """Configure BIND."""
    set_forwarders(arguments.forwarders)
    set_dnssec(arguments.dnssec)
    action_utils.service_restart('bind9')


def main():
    """Parse arguments and perform all duties"""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
