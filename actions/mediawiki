#!/usr/bin/python3
# -*- mode: python -*-
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Configuration helper for Mediawiki
"""

import argparse
import os
import subprocess

from plinth import action_utils
from plinth.utils import generate_password, grep

MAINTENANCE_SCRIPTS_DIR = "/usr/share/mediawiki/maintenance"
CONF_FILE = '/var/lib/mediawiki/LocalSettings.php'


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    subparsers.add_parser('enable', help='Enable mediawiki')
    subparsers.add_parser('disable', help='Disable mediawiki')
    subparsers.add_parser('setup', help='Setup mediawiki')
    change_password = subparsers.add_parser('change-password',
                                            help='Change user password')
    change_password.add_argument('--username', default='admin',
                                 help='name of the mediawiki user')
    change_password.add_argument('--password',
                                 help='new password for the mediawiki user')

    subparsers.required = True
    return parser.parse_args()


def subcommand_setup(_):
    data_dir = '/var/lib/mediawiki-db/'
    if not os.path.exists(data_dir):
        os.mkdir(data_dir)
        install_script = os.path.join(MAINTENANCE_SCRIPTS_DIR, 'install.php')
        subprocess.check_call([
            'php', install_script, '--confpath=/etc/mediawiki',
            '--dbtype=sqlite', '--dbpath=/var/lib/mediawiki-db/',
            '--scriptpath=/mediawiki', '--pass',
            generate_password(), 'Wiki', 'admin'
        ])
    action_utils.set_ownership_recursively(data_dir, "www-data", "www-data")
    disable_public_registrations()
    disable_anonymous_editing()
    change_logo()


def disable_public_registrations():
    if not grep('createaccount', CONF_FILE):
        with open(CONF_FILE, 'a') as f:
            f.write("$wgGroupPermissions['*']['createaccount'] = false;\n")


def disable_anonymous_editing():
    if not grep('edit', CONF_FILE):
        with open(CONF_FILE, 'a') as f:
            f.write("$wgGroupPermissions['*']['edit'] = false;\n")


def change_logo():
    """Change the placeholder logo to mediawiki's official logo"""
    with open(CONF_FILE, 'r') as cf:
        data = cf.readlines()

    for linum, line in enumerate(data):
        if line.lstrip().startswith('$wgLogo'):
            data[linum] = line.replace('assets/wiki.png',
                                       'assets/mediawiki.png')
            break

    with open(CONF_FILE, 'w') as f:
        f.writelines(data)


def subcommand_change_password(arguments):
    """Change the password for a given user"""
    change_password_script = os.path.join(MAINTENANCE_SCRIPTS_DIR,
                                          'changePassword.php')

    subprocess.check_call([
        'php', change_password_script, '--user', arguments.username,
        '--password', arguments.password
    ])


def subcommand_enable(_):
    """Enable web configuration and reload."""
    action_utils.service_enable('mediawiki')
    action_utils.webserver_enable('mediawiki')


def subcommand_disable(_):
    """Disable web configuration and reload."""
    action_utils.webserver_disable('mediawiki')
    action_utils.service_disable('mediawiki')


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
