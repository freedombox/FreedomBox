#!/usr/bin/python3
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Configuration helper for gnusocial
"""

import argparse
import os
import shutil
import subprocess
import sys

from plinth import action_utils


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    # Setup gnusocial site
    subparsers.add_parser('setup', help='Perform first time setup operations')

    # Enable gnusocial site
    subparsers.add_parser('enable', help='Enable gnusocial site')

    # Disable gnusocial site
    subparsers.add_parser('disable', help='Disable gnusocial site')

    pre_install = subparsers.add_parser(
        'pre-install',
        help='Preseed debconf values before packages are installed.')
    subparsers.add_parser('setup', help='Setup gnusocial configuration')

    return parser.parse_args()


def subcommand_pre_install(arguments):
    """Preseed debconf values before packages are installed."""

    config_params = [b'gnu-social gnu-social/server-ssl boolean false',
                     b'gnu-social gnu-social/site-profile select Community',
                     b'gnu-social gnu-social/admin-nickname string admin',
                     b'gnu-social gnu-social/admin-password password FreedomBox123',
                     b'gnu-social gnu-social/admin-password-again password FreedomBox123',
                     ]

                    # b'gnu-social gnu-social/internal/skip-preseed boolean false',
                    # b'gnu-social gnu-social/admin-email string root@localhost',
                    # b'gnu-social gnu-social/missing-db-package-error string abort',
                    # b'gnu-social gnu-social/db/dbname string gnusocial',
                    # b'gnu-social gnu-social/site-name string "GNU Social"',
                    # b'gnu-social gnu-social/dbconfig-remove boolean true',
                    #
                    # b'gnu-social gnu-social/mysql/method string "Unix socket"',
                    # b'gnu-social gnu-social/db/app-user string gnu-social@localhost',
                    # b'gnu-social gnu-social/internal/reconfiguring boolean false',
                    # b'gnu-social gnu-social/dbconfig-install boolean true',
                    # b'gnu-social gnu-social/upgrade-backup boolean true',
                    # b'gnu-social gnu-social/upgrade-error select abort',
                    # b'gnu-social gnu-social/dbconfig-upgrade boolean true',
                    # b'gnu-social gnu-social/remote/host string localhost',
                    # b'gnu-social gnu-social/dbconfig-reinstall boolean false',
                    # b'gnu-social gnu-social/install-error select abort',
                    # b'gnu-social gnu-social/remove-error select abort',
                    # b'gnu-social gnu-social/database-type string mysql',
                    # b'gnu-social gnu-social/purge boolean false',
    for config_param in config_params:
        subprocess.check_output(['debconf-set-selections'], input=config_param)


def subcommand_enable(_):
    """Enable gnusocial site."""
    action_utils.webserver_enable('gnu-social')


def subcommand_disable(_):
    """Disable gnusocial site."""
    action_utils.webserver_disable('gnu-social')


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
