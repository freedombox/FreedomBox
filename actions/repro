#!/usr/bin/python3
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Configuration helper for repro SIP proxy.
"""

import argparse

from plinth import action_utils

CONFIG = '/etc/repro/repro.config'


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    subparsers.add_parser('setup', help='Configure repro')
    subparsers.add_parser('enable', help='Enable repro service')
    subparsers.add_parser('disable', help='Disable repro service')

    return parser.parse_args()


def subcommand_setup(_):
    """Configure repro."""
    with open(CONFIG, 'r') as conf:
        lines = conf.readlines()

    with open(CONFIG, 'w') as conf:
        for line in lines:
            if line.startswith('Database1Path'):
                # workaround for Debian bug #803113
                conf.write('Database1Path = /var/lib/repro\n')
            elif line.startswith('TLSPort'):
                conf.write('TLSPort = 5061\n')
            elif line.startswith('DisableHttpAuth'):
                # let apache handle authentication
                conf.write('DisableHttpAuth = true\n')
            else:
                conf.write(line)

    action_utils.service_restart('repro')
    action_utils.webserver_enable('repro-plinth')


def subcommand_enable(_):
    """Start service."""
    action_utils.service_enable('repro')


def subcommand_disable(_):
    """Stop service."""
    action_utils.service_disable('repro')


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
