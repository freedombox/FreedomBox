#!/usr/bin/python3
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Configuration helper for repro SIP proxy.
"""

import os
import sys
import time
from urllib import request, error

import argparse
import augeas

from plinth import action_utils

CONFIG = '/etc/repro/repro.config'
AUG_PATH = '/files' + CONFIG + '/.anon/'
CERT_DIR = '/etc/letsencrypt/live'


class MissingCertificateError(Exception):
    """
    Exception raised when LetsEncrypt certificate for given domain could not
    be found.
    """
    pass


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    setup = subparsers.add_parser('setup', help='Configure repro')
    setup.add_argument('--domain', help='Domain name')

    add_domain = subparsers.add_parser('add-domain', help='Add domain name')
    add_domain.add_argument('--domain', help='Domain name')

    remove_domain = subparsers.add_parser('remove-domain',
                                          help='Remove domain name')
    remove_domain.add_argument('--domain', help='Domain name')

    add_letsencrypt = subparsers.add_parser(
        'add-letsencrypt',
        help='Start using LetsEncrypt certificate')
    add_letsencrypt.add_argument('--domain', help='Domain name')

    drop_letsencrypt = subparsers.add_parser(
        'drop-letsencrypt',
        help='Stop using LetsEncrypt certificate, if it matches configured '
        'domain')
    drop_letsencrypt.add_argument('--domain', help='Domain name')

    return parser.parse_args()


def subcommand_setup(arguments):
    """Configure repro."""
    aug = load_augeas()

    # workaround for Debian bug #803113
    aug.set(AUG_PATH + 'Database1Path', '/var/lib/repro')
    aug.set(AUG_PATH + 'TLSPort', '5061')
    # let apache handle authentication
    aug.set(AUG_PATH + 'DisableHttpAuth', 'true')
    aug.save()

    action_utils.service_restart('repro')
    action_utils.webserver_enable('repro-plinth')

    if arguments.domain:
        while 1:
            tries = 0
            try:
                _add_domain(arguments.domain, restart=False)
                break
            except error.URLError:
                tries += 1
                if tries >= 30:
                    return
                time.sleep(2)
        try:
            _add_letsencrypt(arguments.domain, restart=False)
        except MissingCertificateError:
            pass

        action_utils.service_restart('repro')


def subcommand_add_domain(arguments):
    """Add domain name."""
    _add_domain(arguments.domain)


def _add_domain(domain, restart=True):
    """Add domain name."""
    request.urlopen(
        'http://localhost:5080/domains.html?domainUri=' + domain \
        + '&action=Add')

    if restart:
        action_utils.service_restart('repro')


def subcommand_remove_domain(arguments):
    """Remove domain name."""
    request.urlopen(
        'http://localhost:5080/domains.html?action=Remove&remove.' \
        + arguments.domain + '=on')

    action_utils.service_restart('repro')


def subcommand_add_letsencrypt(arguments):
    """Start using letsencrypt certificate."""
    try:
        _add_letsencrypt(arguments.domain)
    except MissingCertificateError as err:
        print(str(err), file=sys.stderr)
        sys.exit(1)


def _add_letsencrypt(domain, restart=True):
    """Start using letsencrypt certificate."""
    cert_file = os.path.join(CERT_DIR, domain, 'fullchain.pem')
    key_file = os.path.join(CERT_DIR, domain, 'privkey.pem')

    if os.path.isfile(cert_file) and os.path.isfile(key_file):
        # XXX: Should use augeas here, but it doesn't always leave a
        # space after the = separator, and repro doesn't like that.
        with open('/etc/repro/repro.config', 'r') as conffile:
            lines = conffile.readlines()
        with open('/etc/repro/repro.config', 'w') as conffile:
            for line in lines:
                if line.startswith('TLSDomainName ='):
                    conffile.write('TLSDomainName = {0}\n'.format(domain))
                elif line.startswith('TLSCertificate ='):
                    conffile.write('TLSCertificate = {0}\n'.format(cert_file))
                elif line.startswith('TLSPrivateKey ='):
                    conffile.write('TLSPrivateKey = {0}\n'.format(key_file))
                else:
                    conffile.write(line)

        if restart:
            action_utils.service_restart('repro')
    else:
        raise MissingCertificateError(
            'Could not find certificate for domain:', domain)


def subcommand_drop_letsencrypt(arguments):
    """Stop using letsencrypt certificate, if it matches configured domain."""
    aug = load_augeas()
    if aug.get(AUG_PATH + 'TLSDomainName') == arguments.domain:
        aug.set(AUG_PATH + 'TLSDomainName', None)
        aug.set(AUG_PATH + 'TLSCertificate', None)
        aug.set(AUG_PATH + 'TLSPrivateKey', None)
        aug.save()

        action_utils.service_restart('repro')


def load_augeas():
    """Initialize Augeas."""
    aug = augeas.Augeas(flags=augeas.Augeas.NO_LOAD +
                        augeas.Augeas.NO_MODL_AUTOLOAD)
    aug.set('/augeas/load/Php/lens', 'Php.lns')
    aug.set('/augeas/load/Php/incl[last() + 1]', CONFIG)
    aug.load()
    return aug


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
