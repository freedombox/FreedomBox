#!/usr/bin/python3
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Configuration helper for filesystem snapshots.
"""

import argparse
import json
import subprocess

FSTAB = '/etc/fstab'


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    subparsers.add_parser('setup', help='Configure snapper')
    subparsers.add_parser('list', help='List snapshots')
    subparsers.add_parser('create', help='Create snapshot')

    subparser = subparsers.add_parser('delete', help='Delete snapshot')
    subparser.add_argument('number', help='Number of snapshot to delete')

    subparser = subparsers.add_parser('rollback', help='Rollback to snapshot')
    subparser.add_argument('number', help='Number of snapshot to rollback to')

    return parser.parse_args()


def subcommand_setup(_):
    """Configure snapper."""
    # Check if root config exists.
    command = ['snapper', 'list-configs']
    process = subprocess.run(command, stdout=subprocess.PIPE, check=True)
    output = process.stdout.decode()

    # Create root config if needed.
    if 'root' not in output:
        command = ['snapper', 'create-config', '/']
        subprocess.run(command, check=True)

    # Add mountpoint for subvolumes.
    with open(FSTAB, 'r') as fstab:
        lines = fstab.readlines()

    spec = None
    for line in lines:
        if '.snapshots' in line:
            return
        if 'btrfs' in line:
            spec = line.split(' ')[0]

    if spec:
        with open(FSTAB, 'a') as fstab:
            fstab.write(spec + ' /.snapshots btrfs subvol=.snapshots 0 1\n')


def subcommand_list(_):
    """List snapshots."""
    command = ['snapper', 'list']
    process = subprocess.run(command, stdout=subprocess.PIPE, check=True)
    lines = process.stdout.decode().splitlines()
    keys = ('type', 'number', 'pre_number', 'date', 'user', 'cleanup',
            'description')
    snapshots = []
    for line in lines[2:]:
        parts = [part.strip() for part in line.split('|')]
        snapshots.append(dict(zip(keys, parts)))

    # Mark default subvolume.
    command = ['btrfs', 'subvolume', 'get-default', '/']
    process = subprocess.run(command, stdout=subprocess.PIPE, check=True)
    output = process.stdout.decode()
    default = None
    if '.snapshots' in output:
        default = output.split('/')[1]
    for snapshot in snapshots:
        snapshot['is_default'] = snapshot['number'] == default

    print(json.dumps(snapshots))


def subcommand_create(_):
    """Create snapshot."""
    command = ['snapper', 'create', '--description', 'manually created']
    subprocess.run(command, check=True)


def subcommand_delete(arguments):
    """Delete snapshot."""
    command = ['snapper', 'delete', arguments.number]
    subprocess.run(command, check=True)


def subcommand_rollback(arguments):
    """Rollback to snapshot."""
    command = ['snapper', 'rollback', '--description', 'created by rollback',
               arguments.number]
    subprocess.run(command, check=True)


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()
